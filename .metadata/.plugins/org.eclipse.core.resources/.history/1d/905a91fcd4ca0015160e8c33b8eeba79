package glazer.englard.tetris;

import java.awt.Color;
import java.util.Random;

public class Piece {

	// the shape and color of the piece are randomly generated
	// each piece is made of 4 subunits

	// private char shape;
	protected Color color;
	protected int row1;
	protected int column1;
	protected int row2;
	protected int column2;
	protected int row3;
	protected int column3;
	protected int row4;
	protected int column4;
	protected int turnCounter;

	public Piece() {
		// generateColor();
		// generateShape();
		// setStartPosition(); // based on the shape, the boxes in grid that are
		// highlighed
		this.turnCounter = 0;
	}

	public int getRow1() {
		return row1;
	}

	public void setRow1(int row1) {
		this.row1 = row1;
	}

	public int getColumn1() {
		return column1;
	}

	public void setColumn1(int column1) {
		this.column1 = column1;
	}

	public int getRow2() {
		return row2;
	}

	public void setRow2(int row2) {
		this.row2 = row2;
	}

	public int getColumn2() {
		return column2;
	}

	public void setColumn2(int column2) {
		this.column2 = column2;
	}

	public int getRow3() {
		return row3;
	}

	public void setRow3(int row3) {
		this.row3 = row3;
	}

	public int getColumn3() {
		return column3;
	}

	public void setColumn3(int column3) {
		this.column3 = column3;
	}

	public int getRow4() {
		return row4;
	}

	public void setRow4(int row4) {
		this.row4 = row4;
	}

	public int getColumn4() {
		return column4;
	}

	public void setColumn4(int column4) {
		this.column4 = column4;
	}

	// public char getShape() {
	// return shape;
	// }

	public Color getColor() {
		return color;
	}

	/*
	 * private void generateColor() { Random newColor = new Random(); int num =
	 * newColor.nextInt(8); switch (num) { case 0: this.color = Color.BLUE;
	 * break; case 1: this.color = Color.CYAN; break; case 2: this.color =
	 * Color.GREEN; break; case 3: this.color = Color.MAGENTA; break; case 4:
	 * this.color = Color.ORANGE; break; case 5: this.color = Color.PINK; case
	 * 6: this.color = Color.RED; break; case 7: this.color = Color.YELLOW;
	 * break; }
	 * 
	 * }
	 * 
	 * private void generateShape() { Random newShape = new Random(); int
	 * numShape = newShape.nextInt(5); switch (numShape) { case 0: shape = 'L';
	 * break; case 1: shape = 'Z'; break; case 2: shape = 'S'; break; case 3:
	 * shape = 'l'; break; case 4: shape = 'T'; break; case 5: shape = 'O';
	 * break; case 6: shape = 'J'; break; } }
	 * 
	 * private void setStartPosition() { switch (shape) { case 'L': row1 = -1;
	 * // you dont see it in beg - may cause error row2 = 0; row3 = 0; row4 = 0;
	 * column1 = 5; column2 = 5; column3 = 4; column4 = 3; break;
	 *  case 'Z': row1
	 * = -1; // you dont see it in beg - may cause error row2 = -1; row3 = 0;
	 * row4 = 0; column1 = 3; column2 = 4; column3 = 4; column4 = 5; break; 
	 * case 'S': row1 = -1; // you dont see it in beg - may cause error row2 = -1;
	 * row3 = 0; row4 = 0; column1 = 4; column2 = 5; column3 = 4; column4 = 3;
	 * break; 
	 * case 'l': row1 = 0; row2 = 0; row3 = 0; row4 = 0; column1 = 3;
	 * column2 = 4; column3 = 5; column4 = 6; break; 
	 * case 'T': row1 = -1; // you
	 * dont see it in beg - may cause error row2 = 0; row3 = 0; row4 = 0;
	 * column1 = 5; column2 = 5; column3 = 4; column4 = 6; break; 
	 * case 'O': row1
	 * = -1; // you dont see it in beg - may cause error row2 = -1; row3 = 0;
	 * row4 = 0; column1 = 4; column2 = 4; column3 = 5; column4 = 5;
	 * 
	 * break; case 'J': row1 = -1; // you dont see it in beg - may cause error
	 * row2 = 0; row3 = 0; row4 = 0; column1 = 3; column2 = 3; column3 = 4;
	 * column4 = 5; break; }
	 * 
	 * }
	 * 
	 * 
	 * 
	 * public void turn() { // keep track of what number turn it is % 4 (as
	 * there r 4 diff turns // 90,180,270,360) // will show which type of turn
	 * needs to be done int turnType = turnCounter % 4; switch(turnType){ case
	 * 0: break; case 1: break; case 2: break; case 3: break; }
	 * 
	 * turnCounter++;
	 * 
	 * }
	 */

	public void moveRight() {
		
		column1 += 1;
		column2 += 1;
		column3 += 1;
		column4 += 1;

	}

	public void moveLeft() {
		column1 -= 1;
		column2 -= 1;
		column3 -= 1;
		column4 -= 1;

	}

	public void moveDown() {

		row1 += 1;
		row2 += 1;
		row3 += 1;
		row4 += 1;

	}

	public void moveDownFast() {
		
		row1 += 2;
		row2 += 2;
		row3 += 2;
		row4 += 2;
	}
}
